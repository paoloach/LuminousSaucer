esphome:
  name: luminousSaucer
  on_boot:
    then:
     - lambda: |-
            auto time = id(sntp_time).now();
            auto currentTime = time.minute+time.hour*60;
            auto startTime = id(start_minute).state + id(start_hour).state*60;
            auto endTime = id(end_minute).state +  id(end_hour).state*60;
            if (currentTime >= startTime && currentTime <= endTime) {
                auto call = id(light_led)->turn_on();
                call.perform();
            } else {
               auto call = id(light_led)->turn_off();
               call.perform();
            }


  on_loop:
    then:
        - lambda: |-
            auto time = id(sntp_time).now();
            
            if (time.minute == id(start_minute).state && time.hour == id(start_hour).state  && time.second==0 ){
                auto call = id(light_led)->turn_on();
                call.perform();
            }
            if (time.minute == id(end_minute).state && time.hour == id(end_hour).state && time.second==0 ){
                auto call = id(light_led).turn_off();
                call.perform();
            }




esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

ota:
  password: ""

wifi:
  ssid: "networkd id"
  password: "password"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "saucer"
    password: "saucer"

captive_portal:

output:
  - platform: ledc
    pin: GPIO27
    id: gpio_27

# Example usage in a light
light:
  - platform: monochromatic
    output: gpio_27
    name: "Light"
    id: "light_led"

number:
  - platform: template
    name: start_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 7
    unit_of_measurement: "h"
    id: start_hour
  - platform: template
    name: start_minute
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 0
    unit_of_measurement: "m"
    id: start_minute
  - platform: template
    name: end_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 22
    unit_of_measurement: "h"
    id: end_hour
  - platform: template
    name: end_minute
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 00
    unit_of_measurement: "m"
    id: end_minute    

      


time:
    - platform: sntp
      id: sntp_time

api:
    password: ""
    reboot_timeout: 0s
    services:
        - service: start_light
          variables:
            hour: int
            minute: int
          then:
            - number.set:
                id: start_minute
                value: !lambda 'return minute;'
            - number.set:
                id: start_hour
                value: !lambda 'return hour;'
            - logger.log:
                format: "set start light  %d:%d"
                args: [ 'hour', 'minute' ]
        - service: end_light
          variables:
            hour: int
            minute: int
          then:
            - number.set:
                id: end_minute
                value: !lambda 'return minute;'
            - number.set:
                id: end_hour
                value: !lambda 'return hour;'
            - logger.log:
                format: "set end light  %d:%d"
                args: [ 'id(end_hour)', 'id(end_minute)' ]

