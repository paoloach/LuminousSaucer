//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

package it.achdjian.saucer.luminous.protobuf;

@kotlin.jvm.JvmName("-initializehelloResponse")
public inline fun helloResponse(block: it.achdjian.saucer.luminous.protobuf.HelloResponseKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.HelloResponse =
  it.achdjian.saucer.luminous.protobuf.HelloResponseKt.Dsl._create(it.achdjian.saucer.luminous.protobuf.HelloResponse.newBuilder()).apply { block() }._build()
public object HelloResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: it.achdjian.saucer.luminous.protobuf.HelloResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: it.achdjian.saucer.luminous.protobuf.HelloResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): it.achdjian.saucer.luminous.protobuf.HelloResponse = _builder.build()

    /**
     * <pre>
     * The version of the API to use. The _client_ (for example Home Assistant) needs to check
     * for compatibility and if necessary adopt to an older API.
     * Major is for breaking changes in the base protocol - a mismatch will lead to immediate disconnect_client_
     * Minor is for breaking changes in individual messages - a mismatch will lead to a warning message
     * </pre>
     *
     * <code>uint32 api_version_major = 1;</code>
     */
    public var apiVersionMajor: kotlin.Int
      @JvmName("getApiVersionMajor")
      get() = _builder.getApiVersionMajor()
      @JvmName("setApiVersionMajor")
      set(value) {
        _builder.setApiVersionMajor(value)
      }
    /**
     * <pre>
     * The version of the API to use. The _client_ (for example Home Assistant) needs to check
     * for compatibility and if necessary adopt to an older API.
     * Major is for breaking changes in the base protocol - a mismatch will lead to immediate disconnect_client_
     * Minor is for breaking changes in individual messages - a mismatch will lead to a warning message
     * </pre>
     *
     * <code>uint32 api_version_major = 1;</code>
     */
    public fun clearApiVersionMajor() {
      _builder.clearApiVersionMajor()
    }

    /**
     * <code>uint32 api_version_minor = 2;</code>
     */
    public var apiVersionMinor: kotlin.Int
      @JvmName("getApiVersionMinor")
      get() = _builder.getApiVersionMinor()
      @JvmName("setApiVersionMinor")
      set(value) {
        _builder.setApiVersionMinor(value)
      }
    /**
     * <code>uint32 api_version_minor = 2;</code>
     */
    public fun clearApiVersionMinor() {
      _builder.clearApiVersionMinor()
    }

    /**
     * <pre>
     * A string identifying the server (ESP); like client info this may be empty
     * and only exists for debugging/logging purposes.
     * For example "ESPHome v1.10.0 on ESP8266"
     * </pre>
     *
     * <code>string server_info = 3;</code>
     */
    public var serverInfo: kotlin.String
      @JvmName("getServerInfo")
      get() = _builder.getServerInfo()
      @JvmName("setServerInfo")
      set(value) {
        _builder.setServerInfo(value)
      }
    /**
     * <pre>
     * A string identifying the server (ESP); like client info this may be empty
     * and only exists for debugging/logging purposes.
     * For example "ESPHome v1.10.0 on ESP8266"
     * </pre>
     *
     * <code>string server_info = 3;</code>
     */
    public fun clearServerInfo() {
      _builder.clearServerInfo()
    }

    /**
     * <pre>
     * The name of the server (App.get_name())
     * </pre>
     *
     * <code>string name = 4;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * The name of the server (App.get_name())
     * </pre>
     *
     * <code>string name = 4;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun it.achdjian.saucer.luminous.protobuf.HelloResponse.copy(block: it.achdjian.saucer.luminous.protobuf.HelloResponseKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.HelloResponse =
  it.achdjian.saucer.luminous.protobuf.HelloResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

