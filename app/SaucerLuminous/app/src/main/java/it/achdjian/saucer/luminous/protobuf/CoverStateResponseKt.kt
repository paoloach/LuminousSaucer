//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

package it.achdjian.saucer.luminous.protobuf;

@kotlin.jvm.JvmName("-initializecoverStateResponse")
public inline fun coverStateResponse(block: it.achdjian.saucer.luminous.protobuf.CoverStateResponseKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.CoverStateResponse =
  it.achdjian.saucer.luminous.protobuf.CoverStateResponseKt.Dsl._create(it.achdjian.saucer.luminous.protobuf.CoverStateResponse.newBuilder()).apply { block() }._build()
public object CoverStateResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: it.achdjian.saucer.luminous.protobuf.CoverStateResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: it.achdjian.saucer.luminous.protobuf.CoverStateResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): it.achdjian.saucer.luminous.protobuf.CoverStateResponse = _builder.build()

    /**
     * <code>fixed32 key = 1;</code>
     */
    public var key: kotlin.Int
      @JvmName("getKey")
      get() = _builder.getKey()
      @JvmName("setKey")
      set(value) {
        _builder.setKey(value)
      }
    /**
     * <code>fixed32 key = 1;</code>
     */
    public fun clearKey() {
      _builder.clearKey()
    }

    /**
     * <pre>
     * legacy: state has been removed in 1.13
     * clients/servers must still send/accept it until the next protocol change
     * </pre>
     *
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.LegacyCoverState legacy_state = 2;</code>
     */
    public var legacyState: it.achdjian.saucer.luminous.protobuf.LegacyCoverState
      @JvmName("getLegacyState")
      get() = _builder.getLegacyState()
      @JvmName("setLegacyState")
      set(value) {
        _builder.setLegacyState(value)
      }
    /**
     * <pre>
     * legacy: state has been removed in 1.13
     * clients/servers must still send/accept it until the next protocol change
     * </pre>
     *
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.LegacyCoverState legacy_state = 2;</code>
     */
    public fun clearLegacyState() {
      _builder.clearLegacyState()
    }

    /**
     * <code>float position = 3;</code>
     */
    public var position: kotlin.Float
      @JvmName("getPosition")
      get() = _builder.getPosition()
      @JvmName("setPosition")
      set(value) {
        _builder.setPosition(value)
      }
    /**
     * <code>float position = 3;</code>
     */
    public fun clearPosition() {
      _builder.clearPosition()
    }

    /**
     * <code>float tilt = 4;</code>
     */
    public var tilt: kotlin.Float
      @JvmName("getTilt")
      get() = _builder.getTilt()
      @JvmName("setTilt")
      set(value) {
        _builder.setTilt(value)
      }
    /**
     * <code>float tilt = 4;</code>
     */
    public fun clearTilt() {
      _builder.clearTilt()
    }

    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.CoverOperation current_operation = 5;</code>
     */
    public var currentOperation: it.achdjian.saucer.luminous.protobuf.CoverOperation
      @JvmName("getCurrentOperation")
      get() = _builder.getCurrentOperation()
      @JvmName("setCurrentOperation")
      set(value) {
        _builder.setCurrentOperation(value)
      }
    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.CoverOperation current_operation = 5;</code>
     */
    public fun clearCurrentOperation() {
      _builder.clearCurrentOperation()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun it.achdjian.saucer.luminous.protobuf.CoverStateResponse.copy(block: it.achdjian.saucer.luminous.protobuf.CoverStateResponseKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.CoverStateResponse =
  it.achdjian.saucer.luminous.protobuf.CoverStateResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

