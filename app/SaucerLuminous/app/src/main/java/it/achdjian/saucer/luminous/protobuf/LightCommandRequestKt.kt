//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

package it.achdjian.saucer.luminous.protobuf;

@kotlin.jvm.JvmName("-initializelightCommandRequest")
public inline fun lightCommandRequest(block: it.achdjian.saucer.luminous.protobuf.LightCommandRequestKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.LightCommandRequest =
  it.achdjian.saucer.luminous.protobuf.LightCommandRequestKt.Dsl._create(it.achdjian.saucer.luminous.protobuf.LightCommandRequest.newBuilder()).apply { block() }._build()
public object LightCommandRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: it.achdjian.saucer.luminous.protobuf.LightCommandRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: it.achdjian.saucer.luminous.protobuf.LightCommandRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): it.achdjian.saucer.luminous.protobuf.LightCommandRequest = _builder.build()

    /**
     * <code>fixed32 key = 1;</code>
     */
    public var key: kotlin.Int
      @JvmName("getKey")
      get() = _builder.getKey()
      @JvmName("setKey")
      set(value) {
        _builder.setKey(value)
      }
    /**
     * <code>fixed32 key = 1;</code>
     */
    public fun clearKey() {
      _builder.clearKey()
    }

    /**
     * <code>bool has_state = 2;</code>
     */
    public var hasState: kotlin.Boolean
      @JvmName("getHasState")
      get() = _builder.getHasState()
      @JvmName("setHasState")
      set(value) {
        _builder.setHasState(value)
      }
    /**
     * <code>bool has_state = 2;</code>
     */
    public fun clearHasState() {
      _builder.clearHasState()
    }

    /**
     * <code>bool state = 3;</code>
     */
    public var state: kotlin.Boolean
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * <code>bool state = 3;</code>
     */
    public fun clearState() {
      _builder.clearState()
    }

    /**
     * <code>bool has_brightness = 4;</code>
     */
    public var hasBrightness: kotlin.Boolean
      @JvmName("getHasBrightness")
      get() = _builder.getHasBrightness()
      @JvmName("setHasBrightness")
      set(value) {
        _builder.setHasBrightness(value)
      }
    /**
     * <code>bool has_brightness = 4;</code>
     */
    public fun clearHasBrightness() {
      _builder.clearHasBrightness()
    }

    /**
     * <code>float brightness = 5;</code>
     */
    public var brightness: kotlin.Float
      @JvmName("getBrightness")
      get() = _builder.getBrightness()
      @JvmName("setBrightness")
      set(value) {
        _builder.setBrightness(value)
      }
    /**
     * <code>float brightness = 5;</code>
     */
    public fun clearBrightness() {
      _builder.clearBrightness()
    }

    /**
     * <code>bool has_color_mode = 22;</code>
     */
    public var hasColorMode: kotlin.Boolean
      @JvmName("getHasColorMode")
      get() = _builder.getHasColorMode()
      @JvmName("setHasColorMode")
      set(value) {
        _builder.setHasColorMode(value)
      }
    /**
     * <code>bool has_color_mode = 22;</code>
     */
    public fun clearHasColorMode() {
      _builder.clearHasColorMode()
    }

    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ColorMode color_mode = 23;</code>
     */
    public var colorMode: it.achdjian.saucer.luminous.protobuf.ColorMode
      @JvmName("getColorMode")
      get() = _builder.getColorMode()
      @JvmName("setColorMode")
      set(value) {
        _builder.setColorMode(value)
      }
    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ColorMode color_mode = 23;</code>
     */
    public fun clearColorMode() {
      _builder.clearColorMode()
    }

    /**
     * <code>bool has_color_brightness = 20;</code>
     */
    public var hasColorBrightness: kotlin.Boolean
      @JvmName("getHasColorBrightness")
      get() = _builder.getHasColorBrightness()
      @JvmName("setHasColorBrightness")
      set(value) {
        _builder.setHasColorBrightness(value)
      }
    /**
     * <code>bool has_color_brightness = 20;</code>
     */
    public fun clearHasColorBrightness() {
      _builder.clearHasColorBrightness()
    }

    /**
     * <code>float color_brightness = 21;</code>
     */
    public var colorBrightness: kotlin.Float
      @JvmName("getColorBrightness")
      get() = _builder.getColorBrightness()
      @JvmName("setColorBrightness")
      set(value) {
        _builder.setColorBrightness(value)
      }
    /**
     * <code>float color_brightness = 21;</code>
     */
    public fun clearColorBrightness() {
      _builder.clearColorBrightness()
    }

    /**
     * <code>bool has_rgb = 6;</code>
     */
    public var hasRgb: kotlin.Boolean
      @JvmName("getHasRgb")
      get() = _builder.getHasRgb()
      @JvmName("setHasRgb")
      set(value) {
        _builder.setHasRgb(value)
      }
    /**
     * <code>bool has_rgb = 6;</code>
     */
    public fun clearHasRgb() {
      _builder.clearHasRgb()
    }

    /**
     * <code>float red = 7;</code>
     */
    public var red: kotlin.Float
      @JvmName("getRed")
      get() = _builder.getRed()
      @JvmName("setRed")
      set(value) {
        _builder.setRed(value)
      }
    /**
     * <code>float red = 7;</code>
     */
    public fun clearRed() {
      _builder.clearRed()
    }

    /**
     * <code>float green = 8;</code>
     */
    public var green: kotlin.Float
      @JvmName("getGreen")
      get() = _builder.getGreen()
      @JvmName("setGreen")
      set(value) {
        _builder.setGreen(value)
      }
    /**
     * <code>float green = 8;</code>
     */
    public fun clearGreen() {
      _builder.clearGreen()
    }

    /**
     * <code>float blue = 9;</code>
     */
    public var blue: kotlin.Float
      @JvmName("getBlue")
      get() = _builder.getBlue()
      @JvmName("setBlue")
      set(value) {
        _builder.setBlue(value)
      }
    /**
     * <code>float blue = 9;</code>
     */
    public fun clearBlue() {
      _builder.clearBlue()
    }

    /**
     * <code>bool has_white = 10;</code>
     */
    public var hasWhite: kotlin.Boolean
      @JvmName("getHasWhite")
      get() = _builder.getHasWhite()
      @JvmName("setHasWhite")
      set(value) {
        _builder.setHasWhite(value)
      }
    /**
     * <code>bool has_white = 10;</code>
     */
    public fun clearHasWhite() {
      _builder.clearHasWhite()
    }

    /**
     * <code>float white = 11;</code>
     */
    public var white: kotlin.Float
      @JvmName("getWhite")
      get() = _builder.getWhite()
      @JvmName("setWhite")
      set(value) {
        _builder.setWhite(value)
      }
    /**
     * <code>float white = 11;</code>
     */
    public fun clearWhite() {
      _builder.clearWhite()
    }

    /**
     * <code>bool has_color_temperature = 12;</code>
     */
    public var hasColorTemperature: kotlin.Boolean
      @JvmName("getHasColorTemperature")
      get() = _builder.getHasColorTemperature()
      @JvmName("setHasColorTemperature")
      set(value) {
        _builder.setHasColorTemperature(value)
      }
    /**
     * <code>bool has_color_temperature = 12;</code>
     */
    public fun clearHasColorTemperature() {
      _builder.clearHasColorTemperature()
    }

    /**
     * <code>float color_temperature = 13;</code>
     */
    public var colorTemperature: kotlin.Float
      @JvmName("getColorTemperature")
      get() = _builder.getColorTemperature()
      @JvmName("setColorTemperature")
      set(value) {
        _builder.setColorTemperature(value)
      }
    /**
     * <code>float color_temperature = 13;</code>
     */
    public fun clearColorTemperature() {
      _builder.clearColorTemperature()
    }

    /**
     * <code>bool has_cold_white = 24;</code>
     */
    public var hasColdWhite: kotlin.Boolean
      @JvmName("getHasColdWhite")
      get() = _builder.getHasColdWhite()
      @JvmName("setHasColdWhite")
      set(value) {
        _builder.setHasColdWhite(value)
      }
    /**
     * <code>bool has_cold_white = 24;</code>
     */
    public fun clearHasColdWhite() {
      _builder.clearHasColdWhite()
    }

    /**
     * <code>float cold_white = 25;</code>
     */
    public var coldWhite: kotlin.Float
      @JvmName("getColdWhite")
      get() = _builder.getColdWhite()
      @JvmName("setColdWhite")
      set(value) {
        _builder.setColdWhite(value)
      }
    /**
     * <code>float cold_white = 25;</code>
     */
    public fun clearColdWhite() {
      _builder.clearColdWhite()
    }

    /**
     * <code>bool has_warm_white = 26;</code>
     */
    public var hasWarmWhite: kotlin.Boolean
      @JvmName("getHasWarmWhite")
      get() = _builder.getHasWarmWhite()
      @JvmName("setHasWarmWhite")
      set(value) {
        _builder.setHasWarmWhite(value)
      }
    /**
     * <code>bool has_warm_white = 26;</code>
     */
    public fun clearHasWarmWhite() {
      _builder.clearHasWarmWhite()
    }

    /**
     * <code>float warm_white = 27;</code>
     */
    public var warmWhite: kotlin.Float
      @JvmName("getWarmWhite")
      get() = _builder.getWarmWhite()
      @JvmName("setWarmWhite")
      set(value) {
        _builder.setWarmWhite(value)
      }
    /**
     * <code>float warm_white = 27;</code>
     */
    public fun clearWarmWhite() {
      _builder.clearWarmWhite()
    }

    /**
     * <code>bool has_transition_length = 14;</code>
     */
    public var hasTransitionLength: kotlin.Boolean
      @JvmName("getHasTransitionLength")
      get() = _builder.getHasTransitionLength()
      @JvmName("setHasTransitionLength")
      set(value) {
        _builder.setHasTransitionLength(value)
      }
    /**
     * <code>bool has_transition_length = 14;</code>
     */
    public fun clearHasTransitionLength() {
      _builder.clearHasTransitionLength()
    }

    /**
     * <code>uint32 transition_length = 15;</code>
     */
    public var transitionLength: kotlin.Int
      @JvmName("getTransitionLength")
      get() = _builder.getTransitionLength()
      @JvmName("setTransitionLength")
      set(value) {
        _builder.setTransitionLength(value)
      }
    /**
     * <code>uint32 transition_length = 15;</code>
     */
    public fun clearTransitionLength() {
      _builder.clearTransitionLength()
    }

    /**
     * <code>bool has_flash_length = 16;</code>
     */
    public var hasFlashLength: kotlin.Boolean
      @JvmName("getHasFlashLength")
      get() = _builder.getHasFlashLength()
      @JvmName("setHasFlashLength")
      set(value) {
        _builder.setHasFlashLength(value)
      }
    /**
     * <code>bool has_flash_length = 16;</code>
     */
    public fun clearHasFlashLength() {
      _builder.clearHasFlashLength()
    }

    /**
     * <code>uint32 flash_length = 17;</code>
     */
    public var flashLength: kotlin.Int
      @JvmName("getFlashLength")
      get() = _builder.getFlashLength()
      @JvmName("setFlashLength")
      set(value) {
        _builder.setFlashLength(value)
      }
    /**
     * <code>uint32 flash_length = 17;</code>
     */
    public fun clearFlashLength() {
      _builder.clearFlashLength()
    }

    /**
     * <code>bool has_effect = 18;</code>
     */
    public var hasEffect: kotlin.Boolean
      @JvmName("getHasEffect")
      get() = _builder.getHasEffect()
      @JvmName("setHasEffect")
      set(value) {
        _builder.setHasEffect(value)
      }
    /**
     * <code>bool has_effect = 18;</code>
     */
    public fun clearHasEffect() {
      _builder.clearHasEffect()
    }

    /**
     * <code>string effect = 19;</code>
     */
    public var effect: kotlin.String
      @JvmName("getEffect")
      get() = _builder.getEffect()
      @JvmName("setEffect")
      set(value) {
        _builder.setEffect(value)
      }
    /**
     * <code>string effect = 19;</code>
     */
    public fun clearEffect() {
      _builder.clearEffect()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun it.achdjian.saucer.luminous.protobuf.LightCommandRequest.copy(block: it.achdjian.saucer.luminous.protobuf.LightCommandRequestKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.LightCommandRequest =
  it.achdjian.saucer.luminous.protobuf.LightCommandRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

