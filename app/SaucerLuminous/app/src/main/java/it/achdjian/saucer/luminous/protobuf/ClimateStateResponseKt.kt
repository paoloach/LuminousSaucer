//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

package it.achdjian.saucer.luminous.protobuf;

@kotlin.jvm.JvmName("-initializeclimateStateResponse")
public inline fun climateStateResponse(block: it.achdjian.saucer.luminous.protobuf.ClimateStateResponseKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.ClimateStateResponse =
  it.achdjian.saucer.luminous.protobuf.ClimateStateResponseKt.Dsl._create(it.achdjian.saucer.luminous.protobuf.ClimateStateResponse.newBuilder()).apply { block() }._build()
public object ClimateStateResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: it.achdjian.saucer.luminous.protobuf.ClimateStateResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: it.achdjian.saucer.luminous.protobuf.ClimateStateResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): it.achdjian.saucer.luminous.protobuf.ClimateStateResponse = _builder.build()

    /**
     * <code>fixed32 key = 1;</code>
     */
    public var key: kotlin.Int
      @JvmName("getKey")
      get() = _builder.getKey()
      @JvmName("setKey")
      set(value) {
        _builder.setKey(value)
      }
    /**
     * <code>fixed32 key = 1;</code>
     */
    public fun clearKey() {
      _builder.clearKey()
    }

    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimateMode mode = 2;</code>
     */
    public var mode: it.achdjian.saucer.luminous.protobuf.ClimateMode
      @JvmName("getMode")
      get() = _builder.getMode()
      @JvmName("setMode")
      set(value) {
        _builder.setMode(value)
      }
    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimateMode mode = 2;</code>
     */
    public fun clearMode() {
      _builder.clearMode()
    }

    /**
     * <code>float current_temperature = 3;</code>
     */
    public var currentTemperature: kotlin.Float
      @JvmName("getCurrentTemperature")
      get() = _builder.getCurrentTemperature()
      @JvmName("setCurrentTemperature")
      set(value) {
        _builder.setCurrentTemperature(value)
      }
    /**
     * <code>float current_temperature = 3;</code>
     */
    public fun clearCurrentTemperature() {
      _builder.clearCurrentTemperature()
    }

    /**
     * <code>float target_temperature = 4;</code>
     */
    public var targetTemperature: kotlin.Float
      @JvmName("getTargetTemperature")
      get() = _builder.getTargetTemperature()
      @JvmName("setTargetTemperature")
      set(value) {
        _builder.setTargetTemperature(value)
      }
    /**
     * <code>float target_temperature = 4;</code>
     */
    public fun clearTargetTemperature() {
      _builder.clearTargetTemperature()
    }

    /**
     * <code>float target_temperature_low = 5;</code>
     */
    public var targetTemperatureLow: kotlin.Float
      @JvmName("getTargetTemperatureLow")
      get() = _builder.getTargetTemperatureLow()
      @JvmName("setTargetTemperatureLow")
      set(value) {
        _builder.setTargetTemperatureLow(value)
      }
    /**
     * <code>float target_temperature_low = 5;</code>
     */
    public fun clearTargetTemperatureLow() {
      _builder.clearTargetTemperatureLow()
    }

    /**
     * <code>float target_temperature_high = 6;</code>
     */
    public var targetTemperatureHigh: kotlin.Float
      @JvmName("getTargetTemperatureHigh")
      get() = _builder.getTargetTemperatureHigh()
      @JvmName("setTargetTemperatureHigh")
      set(value) {
        _builder.setTargetTemperatureHigh(value)
      }
    /**
     * <code>float target_temperature_high = 6;</code>
     */
    public fun clearTargetTemperatureHigh() {
      _builder.clearTargetTemperatureHigh()
    }

    /**
     * <pre>
     * For older peers, equal to preset == CLIMATE_PRESET_AWAY
     * </pre>
     *
     * <code>bool legacy_away = 7;</code>
     */
    public var legacyAway: kotlin.Boolean
      @JvmName("getLegacyAway")
      get() = _builder.getLegacyAway()
      @JvmName("setLegacyAway")
      set(value) {
        _builder.setLegacyAway(value)
      }
    /**
     * <pre>
     * For older peers, equal to preset == CLIMATE_PRESET_AWAY
     * </pre>
     *
     * <code>bool legacy_away = 7;</code>
     */
    public fun clearLegacyAway() {
      _builder.clearLegacyAway()
    }

    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimateAction action = 8;</code>
     */
    public var action: it.achdjian.saucer.luminous.protobuf.ClimateAction
      @JvmName("getAction")
      get() = _builder.getAction()
      @JvmName("setAction")
      set(value) {
        _builder.setAction(value)
      }
    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimateAction action = 8;</code>
     */
    public fun clearAction() {
      _builder.clearAction()
    }

    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimateFanMode fan_mode = 9;</code>
     */
    public var fanMode: it.achdjian.saucer.luminous.protobuf.ClimateFanMode
      @JvmName("getFanMode")
      get() = _builder.getFanMode()
      @JvmName("setFanMode")
      set(value) {
        _builder.setFanMode(value)
      }
    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimateFanMode fan_mode = 9;</code>
     */
    public fun clearFanMode() {
      _builder.clearFanMode()
    }

    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimateSwingMode swing_mode = 10;</code>
     */
    public var swingMode: it.achdjian.saucer.luminous.protobuf.ClimateSwingMode
      @JvmName("getSwingMode")
      get() = _builder.getSwingMode()
      @JvmName("setSwingMode")
      set(value) {
        _builder.setSwingMode(value)
      }
    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimateSwingMode swing_mode = 10;</code>
     */
    public fun clearSwingMode() {
      _builder.clearSwingMode()
    }

    /**
     * <code>string custom_fan_mode = 11;</code>
     */
    public var customFanMode: kotlin.String
      @JvmName("getCustomFanMode")
      get() = _builder.getCustomFanMode()
      @JvmName("setCustomFanMode")
      set(value) {
        _builder.setCustomFanMode(value)
      }
    /**
     * <code>string custom_fan_mode = 11;</code>
     */
    public fun clearCustomFanMode() {
      _builder.clearCustomFanMode()
    }

    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimatePreset preset = 12;</code>
     */
    public var preset: it.achdjian.saucer.luminous.protobuf.ClimatePreset
      @JvmName("getPreset")
      get() = _builder.getPreset()
      @JvmName("setPreset")
      set(value) {
        _builder.setPreset(value)
      }
    /**
     * <code>.it.achdjian.sottovasoluminoso.protobuf.java.ClimatePreset preset = 12;</code>
     */
    public fun clearPreset() {
      _builder.clearPreset()
    }

    /**
     * <code>string custom_preset = 13;</code>
     */
    public var customPreset: kotlin.String
      @JvmName("getCustomPreset")
      get() = _builder.getCustomPreset()
      @JvmName("setCustomPreset")
      set(value) {
        _builder.setCustomPreset(value)
      }
    /**
     * <code>string custom_preset = 13;</code>
     */
    public fun clearCustomPreset() {
      _builder.clearCustomPreset()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun it.achdjian.saucer.luminous.protobuf.ClimateStateResponse.copy(block: it.achdjian.saucer.luminous.protobuf.ClimateStateResponseKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.ClimateStateResponse =
  it.achdjian.saucer.luminous.protobuf.ClimateStateResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

