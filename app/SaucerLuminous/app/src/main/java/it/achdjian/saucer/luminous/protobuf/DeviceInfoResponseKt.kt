//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

package it.achdjian.saucer.luminous.protobuf;

@kotlin.jvm.JvmName("-initializedeviceInfoResponse")
public inline fun deviceInfoResponse(block: it.achdjian.saucer.luminous.protobuf.DeviceInfoResponseKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.DeviceInfoResponse =
  it.achdjian.saucer.luminous.protobuf.DeviceInfoResponseKt.Dsl._create(it.achdjian.saucer.luminous.protobuf.DeviceInfoResponse.newBuilder()).apply { block() }._build()
public object DeviceInfoResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: it.achdjian.saucer.luminous.protobuf.DeviceInfoResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: it.achdjian.saucer.luminous.protobuf.DeviceInfoResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): it.achdjian.saucer.luminous.protobuf.DeviceInfoResponse = _builder.build()

    /**
     * <code>bool uses_password = 1;</code>
     */
    public var usesPassword: kotlin.Boolean
      @JvmName("getUsesPassword")
      get() = _builder.getUsesPassword()
      @JvmName("setUsesPassword")
      set(value) {
        _builder.setUsesPassword(value)
      }
    /**
     * <code>bool uses_password = 1;</code>
     */
    public fun clearUsesPassword() {
      _builder.clearUsesPassword()
    }

    /**
     * <pre>
     * The name of the node, given by "App.set_name()"
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * The name of the node, given by "App.set_name()"
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * <pre>
     * The mac address of the device. For example "AC:BC:32:89:0E:A9"
     * </pre>
     *
     * <code>string mac_address = 3;</code>
     */
    public var macAddress: kotlin.String
      @JvmName("getMacAddress")
      get() = _builder.getMacAddress()
      @JvmName("setMacAddress")
      set(value) {
        _builder.setMacAddress(value)
      }
    /**
     * <pre>
     * The mac address of the device. For example "AC:BC:32:89:0E:A9"
     * </pre>
     *
     * <code>string mac_address = 3;</code>
     */
    public fun clearMacAddress() {
      _builder.clearMacAddress()
    }

    /**
     * <pre>
     * A string describing the ESPHome version. For example "1.10.0"
     * </pre>
     *
     * <code>string esphome_version = 4;</code>
     */
    public var esphomeVersion: kotlin.String
      @JvmName("getEsphomeVersion")
      get() = _builder.getEsphomeVersion()
      @JvmName("setEsphomeVersion")
      set(value) {
        _builder.setEsphomeVersion(value)
      }
    /**
     * <pre>
     * A string describing the ESPHome version. For example "1.10.0"
     * </pre>
     *
     * <code>string esphome_version = 4;</code>
     */
    public fun clearEsphomeVersion() {
      _builder.clearEsphomeVersion()
    }

    /**
     * <pre>
     * A string describing the date of compilation, this is generated by the compiler
     * and therefore may not be in the same format all the time.
     * If the user isn't using ESPHome, this will also not be set.
     * </pre>
     *
     * <code>string compilation_time = 5;</code>
     */
    public var compilationTime: kotlin.String
      @JvmName("getCompilationTime")
      get() = _builder.getCompilationTime()
      @JvmName("setCompilationTime")
      set(value) {
        _builder.setCompilationTime(value)
      }
    /**
     * <pre>
     * A string describing the date of compilation, this is generated by the compiler
     * and therefore may not be in the same format all the time.
     * If the user isn't using ESPHome, this will also not be set.
     * </pre>
     *
     * <code>string compilation_time = 5;</code>
     */
    public fun clearCompilationTime() {
      _builder.clearCompilationTime()
    }

    /**
     * <pre>
     * The model of the board. For example NodeMCU
     * </pre>
     *
     * <code>string model = 6;</code>
     */
    public var model: kotlin.String
      @JvmName("getModel")
      get() = _builder.getModel()
      @JvmName("setModel")
      set(value) {
        _builder.setModel(value)
      }
    /**
     * <pre>
     * The model of the board. For example NodeMCU
     * </pre>
     *
     * <code>string model = 6;</code>
     */
    public fun clearModel() {
      _builder.clearModel()
    }

    /**
     * <code>bool has_deep_sleep = 7;</code>
     */
    public var hasDeepSleep: kotlin.Boolean
      @JvmName("getHasDeepSleep")
      get() = _builder.getHasDeepSleep()
      @JvmName("setHasDeepSleep")
      set(value) {
        _builder.setHasDeepSleep(value)
      }
    /**
     * <code>bool has_deep_sleep = 7;</code>
     */
    public fun clearHasDeepSleep() {
      _builder.clearHasDeepSleep()
    }

    /**
     * <pre>
     * The esphome project details if set
     * </pre>
     *
     * <code>string project_name = 8;</code>
     */
    public var projectName: kotlin.String
      @JvmName("getProjectName")
      get() = _builder.getProjectName()
      @JvmName("setProjectName")
      set(value) {
        _builder.setProjectName(value)
      }
    /**
     * <pre>
     * The esphome project details if set
     * </pre>
     *
     * <code>string project_name = 8;</code>
     */
    public fun clearProjectName() {
      _builder.clearProjectName()
    }

    /**
     * <code>string project_version = 9;</code>
     */
    public var projectVersion: kotlin.String
      @JvmName("getProjectVersion")
      get() = _builder.getProjectVersion()
      @JvmName("setProjectVersion")
      set(value) {
        _builder.setProjectVersion(value)
      }
    /**
     * <code>string project_version = 9;</code>
     */
    public fun clearProjectVersion() {
      _builder.clearProjectVersion()
    }

    /**
     * <code>uint32 webserver_port = 10;</code>
     */
    public var webserverPort: kotlin.Int
      @JvmName("getWebserverPort")
      get() = _builder.getWebserverPort()
      @JvmName("setWebserverPort")
      set(value) {
        _builder.setWebserverPort(value)
      }
    /**
     * <code>uint32 webserver_port = 10;</code>
     */
    public fun clearWebserverPort() {
      _builder.clearWebserverPort()
    }

    /**
     * <code>uint32 bluetooth_proxy_version = 11;</code>
     */
    public var bluetoothProxyVersion: kotlin.Int
      @JvmName("getBluetoothProxyVersion")
      get() = _builder.getBluetoothProxyVersion()
      @JvmName("setBluetoothProxyVersion")
      set(value) {
        _builder.setBluetoothProxyVersion(value)
      }
    /**
     * <code>uint32 bluetooth_proxy_version = 11;</code>
     */
    public fun clearBluetoothProxyVersion() {
      _builder.clearBluetoothProxyVersion()
    }

    /**
     * <code>string manufacturer = 12;</code>
     */
    public var manufacturer: kotlin.String
      @JvmName("getManufacturer")
      get() = _builder.getManufacturer()
      @JvmName("setManufacturer")
      set(value) {
        _builder.setManufacturer(value)
      }
    /**
     * <code>string manufacturer = 12;</code>
     */
    public fun clearManufacturer() {
      _builder.clearManufacturer()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun it.achdjian.saucer.luminous.protobuf.DeviceInfoResponse.copy(block: it.achdjian.saucer.luminous.protobuf.DeviceInfoResponseKt.Dsl.() -> kotlin.Unit): it.achdjian.saucer.luminous.protobuf.DeviceInfoResponse =
  it.achdjian.saucer.luminous.protobuf.DeviceInfoResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

